/*
Catalog Governor Service REST API

This is the service to track assets deployed in customer clusters

API version: ${project.version}
Contact: content-building-ecosystem@vmware.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KubernetesClusterRequest A Kubernetes cluster creation request
type KubernetesClusterRequest struct {
	// name of the cluster where the workload is deployed
	Name                 string               `json:"name"`
	Workloads            []KubernetesWorkload `json:"workloads"`
	AdditionalProperties map[string]interface{}
}

type _KubernetesClusterRequest KubernetesClusterRequest

// NewKubernetesClusterRequest instantiates a new KubernetesClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesClusterRequest(name string, workloads []KubernetesWorkload) *KubernetesClusterRequest {
	this := KubernetesClusterRequest{}
	this.Name = name
	this.Workloads = workloads
	return &this
}

// NewKubernetesClusterRequestWithDefaults instantiates a new KubernetesClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesClusterRequestWithDefaults() *KubernetesClusterRequest {
	this := KubernetesClusterRequest{}
	return &this
}

// GetName returns the Name field value
func (o *KubernetesClusterRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesClusterRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesClusterRequest) SetName(v string) {
	o.Name = v
}

// GetWorkloads returns the Workloads field value
func (o *KubernetesClusterRequest) GetWorkloads() []KubernetesWorkload {
	if o == nil {
		var ret []KubernetesWorkload
		return ret
	}

	return o.Workloads
}

// GetWorkloadsOk returns a tuple with the Workloads field value
// and a boolean to check if the value has been set.
func (o *KubernetesClusterRequest) GetWorkloadsOk() ([]KubernetesWorkload, bool) {
	if o == nil {
		return nil, false
	}
	return o.Workloads, true
}

// SetWorkloads sets field value
func (o *KubernetesClusterRequest) SetWorkloads(v []KubernetesWorkload) {
	o.Workloads = v
}

func (o KubernetesClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["workloads"] = o.Workloads
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *KubernetesClusterRequest) UnmarshalJSON(bytes []byte) (err error) {
	varKubernetesClusterRequest := _KubernetesClusterRequest{}

	if err = json.Unmarshal(bytes, &varKubernetesClusterRequest); err == nil {
		*o = KubernetesClusterRequest(varKubernetesClusterRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "workloads")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubernetesClusterRequest struct {
	value *KubernetesClusterRequest
	isSet bool
}

func (v NullableKubernetesClusterRequest) Get() *KubernetesClusterRequest {
	return v.value
}

func (v *NullableKubernetesClusterRequest) Set(val *KubernetesClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesClusterRequest(val *KubernetesClusterRequest) *NullableKubernetesClusterRequest {
	return &NullableKubernetesClusterRequest{value: val, isSet: true}
}

func (v NullableKubernetesClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
